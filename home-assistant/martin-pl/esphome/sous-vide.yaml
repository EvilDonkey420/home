esphome:
  name: sousvide
  platform: ESP8266
  board: esp01_1m

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

logger:
api:
ota:

light:
  - platform: binary
    id: status_led
    output: status_led_output

output:
  - platform: gpio
    id: status_led_output
    pin:
      number: GPIO13
      inverted: True
  # Depends on https://github.com/esphome/esphome/pull/894
  - platform: duty_cycle
    id: element_output
    pin: GPIO12
    period: 15s

binary_sensor:
  - platform: gpio
    id: button
    pin: 
      number: GPIO0
      mode: INPUT_PULLUP
      inverted: True
    on_press:
      then:
        - lambda: |-
            if (id(sousvide).mode == climate::ClimateMode::CLIMATE_MODE_OFF) {
              id(sousvide).make_call().set_mode("HEAT").perform();
            } else if (id(sousvide).mode == climate::ClimateMode::CLIMATE_MODE_HEAT) {
              id(sousvide).make_call().set_mode("AUTO").perform();
            } else {
              id(sousvide).make_call().set_mode("OFF").perform();
            }

dallas:
  - pin: GPIO14
    update_interval: 1s

sensor:
  - platform: dallas
    id: water_temperature
    address: 0xA30316A2D58AFF28
    name: "Water Temperature"
    filters:
      - sliding_window_moving_average:
          window_size: 5
          send_every: 5

  # Sensors to return PID calculation internals back to home-assistant so we can graph it
  # and assist with tuning
  - platform: template
    name: "PID Output"
    update_interval: 10s
    lambda: return id(sousvide).output;
  - platform: template
    name: "PID P"
    update_interval: 10s
    lambda: return id(sousvide).output_p;
  - platform: template
    name: "PID I"
    update_interval: 10s
    lambda: return id(sousvide).output_i;
  - platform: template
    name: "PID D"
    update_interval: 10s
    lambda: return id(sousvide).output_d;

  # Mode sensor for internal use only. Observe the mode of the pid controller and update
  # the status LED based on this.
  - platform: template
    id: "mode"
    update_interval: 1s
    lambda: return id(sousvide).mode;
    on_value:
      lambda: |-
        static climate::ClimateMode last_mode;
        if (last_mode == id(sousvide).mode) {
          return;
        }
        last_mode = id(sousvide).mode;

        if (id(sousvide).mode == climate::ClimateMode::CLIMATE_MODE_AUTO) {
          auto call = id(status_led).turn_on();
          call.perform();
        } else {
          auto call = id(status_led).turn_off();
          call.perform();
        }

climate:
  # Depends on https://github.com/esphome/esphome/pull/883
  - platform: pid
    id: sousvide
    name: "Sous Vide"
    sensor: water_temperature
    update_interval: 15s
    visual:
      min_temperature: 40 °C
      max_temperature: 65 °C
      temperature_step: 0.1 °C
    default_target_temperature: 45 °C
    output: element_output
    tuning:
      kp: 4
      ki: 0.12
      kd: 0.5
      i_max: 100
      i_enable: 5

# https://www.seriouseats.com/2013/10/sous-vide-101-all-about-eggs.html
# 62.8°C - The perfect egg, 45 mins
# 65.6°C - Not so perfect egg.
# 68.3°C - Bad egg.
